html
	head
		title Flownote
		script(type='text/javascript', src='/frex')
		script(type='text/javascript', src='/js/index.js')
		script(type='text/javascript', src='/js/polymer.min.js')
		script(type='text/javascript', src='/js/jquery-1.10.2.min.js')
		link(href='/css/default.css', media='all', rel='stylesheet', type='text/css')
		link(rel='import', href='/polymer/polymer-elements/polymer-collapse/polymer-collapse.html')
		link(rel='import', href='/polymer/polymer-ui-elements/polymer-ui-menu/polymer-ui-menu.html')
		link(rel='import', href='/polymer/polymer-ui-elements/polymer-ui-menu-item/polymer-ui-menu-item.html')
		link(rel='import', href='/polymer/polymer-ui-elements/polymer-ui-submenu-item/polymer-ui-submenu-item.html')
		link(rel='import', href='/polymer/polymer-ui-elements/polymer-ui-icon-button/polymer-ui-icon-button.html')

	body

		polymer-element(name='flownote-flow-submenu', extends='polymer-ui-submenu-item')

			template
				style
					.hide {
						display: none;
					}

					input {
						height: 40px;
						padding: 0px 10px;
						border: 1px solid transparent;
						border-radius: 3px;
						width: 100%;
					}


				link(rel='stylesheet', href='/polymer/polymer-ui-elements/polymer-ui-submenu-item/polymer-ui-submenu-item.css')

				div#labelItem( class='{{ editmode ? \'hide\' : \'\' }}')
					polymer-ui-menu-item#item(icon='{{icon}}', label='{{label}}', active?='{{active}}', on-tap='activate')
						content(select='.item-content')

				input#labelInput(value='{{label}}', class='{{ editmode ? \'\' : \'hide\' }}', on-keyup='keyup')

				polymer-ui-menu#menu(selected='{{selected}}', selectedItem='{{selectedItem}}')
					content

				polymer-collapse#collapseComp(targetId='menu', closed='{{collapsed}}', defaultClosed)

			script

				Polymer('flownote-flow-submenu', {
					editmode: false,
					active: false,
					ready: function() {
						var self = this;
						self.$.labelInput.addEventListener('blur', function(e) {
							self.editmode = false;
						});
					},
					labelChanged: function() {
						
					},
					editmodeChanged: function() {

						if (this.editmode) {
							this.originalLabel = this.label;
							this.asyncMethod(function() {
								this.$.labelInput.select();
								this.$.labelInput.focus();
							}.bind(this));
						}

						this.fire('editmode', { enabled: this.editmode });
					},
					activate: function() {

						// Switch to editmode
						if ($(this).hasClass('polymer-selected')) {
							this.editmode = true;
						}
					},
					keyup: function(e) {
						switch(e.keyCode) {
						case 13:
							// Enter
							this.$.labelInput.blur();
							break;

						case 27:
							// ESCAPE
							this.label = this.originalLabel;
							this.$.labelInput.blur();
							break;
						}
					},
					update: function() {
						this.$.collapseComp.update();
					}
				});

		polymer-element(name='flownote-flow-item', extends='polymer-ui-menu-item')
			template
				style
					.hide {
						display: none;
					}

					input {
						width: 100%;
						height: 40px;
						padding: 0px 10px;
						border: 1px solid transparent;
						border-radius: 3px;
					}

				div#labelItem(class='{{ editmode ? \'hide\' : \'\' }}')
					polymer-ui-menu-item(icon='{{icon}}', label='{{label}}', active?='{{active}}', on-click='setFocus')
						content

				input#labelInput(value='{{label}}', class='{{ editmode ? \'\' : \'hide\' }}', on-keyup='keyup')

			script
				Polymer('flownote-flow-item', {
					editmode: false,
					icon: null,
					label: null,
					active: null,
					ready: function() {
						var self = this;
						self.$.labelInput.addEventListener('blur', function(e) {
							self.editmode = false;
						});
					},
					labelChanged: function() {
						
					},
					editmodeChanged: function() {

						if (this.editmode) {
							this.originalLabel = this.label;
							this.asyncMethod(function() {
								this.$.labelInput.select();
								this.$.labelInput.focus();
							}.bind(this));
						}

						this.fire('editmode', { enabled: this.editmode });
					},
					setFocus: function() {

						// Switch to editmode
						if ($(this).hasClass('polymer-selected')) {
							this.editmode = true;
						}
					},
					keyup: function(e) {
						switch(e.keyCode) {
						case 13:
							// Enter
							this.$.labelInput.blur();
							break;

						case 27:
							// ESCAPE
							this.label = this.originalLabel;
							this.$.labelInput.blur();
							break;
						}
					}
				});

		polymer-element(name='flownote-flow')
			template

				polymer-ui-menu(theme='polymer-ui-dark-theme')

					flownote-flow-submenu#flownote_flow(icon='tag', label='Subject', active, on-editmode='setEditmode')

						template(repeat='{{ model.items }}')

							flownote-flow-item(icon='{{ icon }}', label='{{ label }}', on-editmode='setEditmode')

			script

				Polymer('flownote-flow', {
					hookmode: false,
					model: {
						items: [
							{ icon: 'settings', label: 'Hello' },
							{ icon: 'settings', label: 'Hello' }
						]
					},
					setEditmode: function(e) {
						this.hookmode = e.detail.enabled;
					},
					addItem: function(pos, item, selected, editmode) {
						this.model.items.splice(pos, 0, item);

						Platform.performMicrotaskCheckpoint();

						// Resize flow size
						var flow = this.$.flownote_flow;
						flow.update();

						// Select this item automatically
						if (selected) {
							flow.selected = pos;
						}

						// Switch to edit mode automatically
						if (editmode) {

							flow.items[flow.selected].editmode = true;
						}
					},
					keyup: function(e) {

						if (!this.hookmode && e.keyCode == 13) {

							// Add item at specific position
							var flow = this.$.flownote_flow;
							var item = { icon: '', label: '' };
							if (flow.selected == null) {
								this.addItem(flow.items.length, item, true, true);
							} else {
								this.addItem(flow.selected + 1, item, true, true);
							}

						}
					}
				});

		flownote-flow

		script

			window.addEventListener('WebComponentsReady', function() {

				var flow = document.querySelector('flownote-flow');

				// Initializing hotkey
				$(window).on('keyup', function(e) {
					flow.keyup(e);
				});
			});
